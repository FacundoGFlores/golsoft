x = np.ogrid[-10:11]
y = (10. - x ** 2) / 30
wy = y % 2 - 1
ny = random.normal(y, .1)
plot(y)
plot(ny)
plot(wy)
ny += 1.3
plot(wy)
plot(ny)
wy *= tau
tau = 2*pi
wy *= tau
ny *= tau
y *= tau
plot(ny - wy)
plot(ny - wy - np.median(ny-wy))
plot(float(ny - wy - np.median(ny-wy)))
plot(np.float(ny - wy - np.median(ny-wy)))
plot(round(ny - wy - np.median(ny-wy)))
plot(np.round(ny - wy - np.median(ny-wy)))
plot(np.round(0.5 * (ny - wy - np.median(ny-wy))))
plot(np.round(0.5 * (ny - wy - np.median(ny-wy))))
plot(np.round(0.5 * (ny - wy - np.median(ny - wy))))
plot(np.round(0.5 * (ny - wy - np.median(ny - wy))))
plot(np.round((ny - wy - np.median(ny - wy)) / tau))
plot(np.round((ny - wy - np.median(ny - wy)) / tau) + wy)
plot(np.round((ny - wy - np.median(ny - wy)) / tau))
plot(np.round((ny - wy - np.median(ny - wy)) / tau) * tau + wy)
y = ((10. - x ** 2) / 30) * tau
wy = y % tau - pi
ny = random.normal(y, .1)
plot(np.round((ny - wy - np.median(ny - wy)) / tau) * tau + wy)
plot(ny)
plot(np.round((ny - wy - np.median(ny - wy)) / tau) * tau + wy)
plot(wy)
y = ((10. - x ** 2) / 30) * tau
ny = random.normal(y, .6)
wy = y % tau - pi
plot(wy)
plot(ny)
plot(np.round((ny - wy - np.median(ny - wy)) / tau) * tau + wy)
y = ((10. - x ** 2) / 30) * tau
wy = y % tau - pi
random.normal?
ny = random.normal(y + np.random.random(), .6)
plot(ny)
plot(wy)
plot(np.round((ny - wy - np.median(ny - wy)) / tau) * tau + wy)
ny = random.normal(y + np.random.random(), .6)
plot(ny)
ny = random.normal(y + np.random.random(), .6)
plot(ny)
ny = random.normal(y + np.random.random() * 5, .6)
plot(ny)
ny = random.normal(y + np.random.random() * 5, .6)
plot(ny)
plot(np.round((ny - wy - np.median(ny - wy)) / tau) * tau + wy)
ny = random.normal(y + np.random.random() * 5, .6)
plot(np.round((ny - wy - np.median(ny - wy)) / tau) * tau + wy)
ny = random.normal(y + np.random.random() * 5, .6)
plot(np.round((ny - wy - np.median(ny - wy)) / tau) * tau + wy)
ny = random.normal(y + np.random.random() * 5, .6)
plot(np.round((ny - wy - np.median(ny - wy)) / tau) * tau + wy)
ny = random.normal(y + np.random.random() * 5, .6)
plot(np.round((ny - wy - np.median(ny - wy)) / tau) * tau + wy)
plot(np.round((ny - wy - np.median(ny - wy)) / tau) * tau + wy)
ny = random.normal(y + np.random.random() * 5, .6)
plot(np.round((ny - wy - np.median(ny - wy)) / tau) * tau + wy)
ny = random.normal(y + np.random.random() * 5, .6)
plot(np.round((ny - wy - np.median(ny - wy)) / tau) * tau + wy)
plot(np.round((ny - wy - np.median(ny - wy)) / tau) * tau + wy)
ny = random.normal(y + np.random.random() * 5, .6)
plot(np.round((ny - wy - np.median(ny - wy)) / tau) * tau + wy)
3**3
showimage(pea.get_fringes(pea.get_initial_phase(pea.get_fringes(im / 50.))) / 2)
32*8
32*8
32*8*28
import pea
cd programacion/github/golsoft/src/
import pea
p = pea.PEA()
p.filename_holo = "1206-h-det.png"
p.filename_ref = "1206-r-det.png"
p.filename_obj = "1206-o-det.png"
from autopipe import showimage
showimage(p.unwrapped_phase)
p.unwrapper
import unwrap
p.unwrapper = unwrap.unwrap_wls
showimage(p.unwrapped_phase)
p.unwrapper = unwrap.unwrap_qg
showimage(p.unwrapped_phase)
qg = p.unwrapped_phase
p.unwrapper = unwrap.unwrap_wls
wls = p.unwrapped_phase
showimage(qg - wls)
showimage(hstack((qg - wls, qg)))
diff = qg - wls
showimage(hstack((np.abs(diff) > pi, qg)))
showimage(hstack((diff > pi, qg)))
showimage(hstack((diff > tau, qg)))
showimage(hstack((qg - tau * (diff > tau), qg)))
showimage(hstack((qg - tau * (diff > tau) + tau * (diff < -tau), qg)))
p.unwrapper = unwrap.unwrap_cls
cls = p.unwrapped_phase
showimage(hstack((qg - tau * (diff > tau) + tau * (diff < -tau), qg), cls))
showimage(hstack((qg - tau * (diff > tau) + tau * (diff < -tau), qg, cls)))
showimage(hstack((qg - tau * (diff > tau) + tau * (diff < -tau), qg, cls)))
showimage(hstack((qg - tau * (diff > tau) + tau * (diff < -tau), qg, wls)))
showimage(hstack((qg - tau * (diff > tau), qg, wls)))
diff = subtract(qg, wls)
from image import subtract
diff = subtract(qg, wls)
showimage(hstack((qg - tau * (diff > tau), qg, wls)))
showimage(hstack((qg, diff)))
showimage(hstack((qg, diff > tau)))
showimage(hstack((qg, diff > tau, diff < - tau)))
showimage(hstack((qg, diff > tau, diff < -tau)))
showimage(hstack((qg, tau * (diff > tau), tau * (diff < -tau))))
showimage(hstack((qg, tau * (diff > tau), qg - tau * (diff > tau))))
showimage(hstack((qg, tau * (diff > tau), qg - tau * (diff > tau), cls)))
showimage(hstack((qg, qg - tau * (diff > tau), cls)))
showimage(hstack((qg, qg - tau * (diff > tau), cls)))
plt.hist(p.phase_corrected)
showimage(p.phase_correct)
showimage(p.phase_corrected)
showimage(qg)
showimage(hstack((qg, qg - tau * (diff > tau), cls)))
showimage(hstack((qg, qg - tau * (diff > tau), cls)))
showimage(hstack((qg, qg - tau * (diff > tau * 2), cls)))
showimage(hstack((qg, qg - tau * (diff > tau * 2), cls)))
plt.hist(qg)
plt.hist(qg)
showimage(qg)
import cv2
bqg = cv2.GaussianBlur(qg, (5, 5), 0)
showimage(hstack((qg, bqg)))
showimage(hstack((qg, qg -bqg)))
showimage(hstack((qg, qg - bqg)))
ret3,th3 = cv2.threshold(bqg, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
ret, th = cv2.threshold(bqg, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
bqg
bqg = normalize(bqg)
normalize?
from image import normalize
bqg = normalize(bqg)
bqg = cv2.GaussianBlur(qg, (5, 5), 0)
bqg = normalize(cv2.GaussianBlur(qg, (5, 5), 0))
showimage(hstack((qg, qg - bqg)))
ret, th = cv2.threshold(bqg, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
ret, th = cv2.threshold(bqg, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
bqg.astype(np.uint8)
ret, th = cv2.threshold(bqg, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
ret, th = cv2.threshold(bqg.astye(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
ret
th
showimage(th)
bqg = normalize(cv2.GaussianBlur(qg, 10, 0)).astype(np.uint8)
bqg = normalize(filters.gau).astype(np.uint8)
from scipy.ndimage import filters
bqg = normalize(filters.gaussian_filter(qg, 10)).astype(np.uint8)
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
showimage(th)
bqg = normalize(qg - filters.gaussian_filter(qg, 10)).astype(np.uint8)
showimage(bqg)
showimage(normalize(qg - filters.gaussian_filter(qg, 10)).astype(np.uint8))
showimage(normalize(qg - filters.gaussian_filter(qg, 20)).astype(np.uint8))
showimage(normalize(qg - filters.gaussian_filter(qg, 40)).astype(np.uint8))
showimage(normalize(qg - filters.gaussian_filter(qg, 80)).astype(np.uint8))
bqg = normalize(qg - filters.gaussian_filter(qg, 80)).astype(np.uint8)
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
showimage(th)
bqg = normalize(qg - filters.gaussian_filter(qg, 160)).astype(np.uint8)
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
showimage(th)
bqg = normalize(qg - filters.gaussian_filter(qg, 320)).astype(np.uint8)
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
showimage(th)
bqg = normalize(qg - filters.gaussian_filter(qg, 640)).astype(np.uint8)
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
showimage(th)
showimage(bqg)
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
bqg = normalize(subtract(qg, filters.gaussian_filter(qg, 640))).astype(np.uint8)
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
showimage(bqg)
showimage(bqg)
showimage(th)
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
bqg = normalize(subtract(qg, filters.gaussian_filter(qg, 10))).astype(np.uint8)
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
showimage(th)
bqg = normalize(subtract(qg, filters.gaussian_filter(qg, 5))).astype(np.uint8)
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
showimage(th)
bqg = normalize(subtract(qg, filters.gaussian_filter(qg, 20))).astype(np.uint8)
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
showimage(th)
bqg = normalize(subtract(qg, filters.gaussian_filter(qg, 40))).astype(np.uint8)
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
showimage(th)
bqg = normalize(subtract(qg, filters.gaussian_filter(qg, 80))).astype(np.uint8)
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
showimage(th)
showimage(hstack((filters.median_filter(qg, 10), filters.gaussian_filter(qg, 10)))
)
showimage(hstack((qg, filters.median_filter(qg, 10), filters.gaussian_filter(qg, 10))))
showimage(hstack((qg, filters.median_filter(qg, 20), filters.gaussian_filter(qg, 10))))
showimage(hstack((qg, subtract(filters.median_filter(qg, 20), filters.gaussian_filter(qg, 10)))))
showimage(hstack((qg, subtract(filters.median_filter(qg, 20), filters.gaussian_filter(qg, 20)))))
showimage(hstack((normalize(qg), normalize(subtract(filters.median_filter(qg, 20), filters.gaussian_filter(qg, 20))))))
showimage(unwrap.wrapped_gradient(qg))
showimage(abs(unwrap.wrapped_gradient(qg)))
showimage(abs(unwrap.wrapped_gradient(qg)) + qg)
showimage(hstack((abs(unwrap.wrapped_gradient(qg)) + qg, qg)))
showimage(hstack((abs(unwrap.wrapped_gradient(qg)) * 2 + qg, qg)))
showimage(hstack((abs(unwrap.wrapped_gradient(qg)) * 2 ** 2 + qg, qg)))
showimage(abs(unwrap.wrapped_gradient(qg)) + qg)
showimage(abs(unwrap.wrapped_gradient(qg)))
bqg = normalize(abs(unwrap.wrapped_gradient(qg)))).astype(np.uint8)
bqg = normalize(abs(unwrap.wrapped_gradient(qg))).astype(np.uint8)
showimage(bqg)
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
showimage(th)
showimage(hstack((normalize(th), bqg)))
showimage(hstack((normalize(subtract(qg, th)), bqg)))
showimage(hstack((normalize(subtract(qg, bqg)), bqg)))
showimage(hstack((normalize(subtract(qg, bqg)), bqg)))
showimage(hstack((normalize(qg, subtract(qg, bqg)), bqg)))
showimage(hstack((qg, normalize(subtract(qg, bqg)), bqg)))
showimage(hstack((normalize(qg), normalize(subtract(qg, bqg)), bqg)))
showimage(hstack((normalize(qg), normalize(filters.gaussian_filter(subtract(qg, bqg), 10)), bqg)))
showimage(hstack((normalize(filters.gaussian_filter(qg, 10)), normalize(filters.gaussian_filter(subtract(qg, bqg), 10)), bqg)))
showimage(hstack((normalize(filters.gaussian_filter(qg, 10)), normalize(subtract(qg, filters.gaussian_filter(subtract(qg, bqg), 10))), bqg)))
showimage(hstack((normalize(filters.gaussian_filter(qg, 10)), normalize(subtract(qg, filters.gaussian_filter(subtract(qg, bqg), 5))), bqg)))
showimage(hstack((normalize(subtract(qg, filters.gaussian_filter(subtract(qg, bqg), 20))), qg)))
showimage(hstack((normalize(subtract(qg, filters.gaussian_filter(subtract(qg, bqg), 20))), normalize(qg))))
showimage(hstack((normalize(subtract(qg, filters.gaussian_filter(subtract(qg, bqg), 40))), normalize(qg))))
bqg = normalize(subtract(qg, filters.gaussian_filter(subtract(qg, bqg), 40).astype(np.uint8)
)
)
bqg = normalize(subtract(qg, filters.gaussian_filter(subtract(qg, bqg), 40))).astype(np.uint8)
gradient = abs(unwrap.wrapped_gradient(qg)))
gradient = abs(unwrap.wrapped_gradient(qg))
showimage(gradient)
bqg = normalize(subtract(qg, filters.gaussian_filter(subtract(qg, gradient), 40))).astype(np.uint8)
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
showimage(hstack((normalize(qg), normalize(th)))
)
showimage(hstack((normalize(qg), normalize(th))))
showimage(hstack((normalize(qg), normalize(th))))
gradient = unwrap.wrapped_gradient(qg)
bqg = normalize(subtract(qg, filters.gaussian_filter(subtract(qg, gradient), 40))).astype(np.uint8)
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
showimage(hstack((normalize(qg), normalize(th))))
bqg = normalize(subtract(qg, filters.gaussian_filter(subtract(qg, gradient), 80))).astype(np.uint8)
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
showimage(hstack((normalize(qg), normalize(th))))
showimage(hstack((normalize(qg), normalize(th))))
showimage(hstack((normalize(bqg), normalize(th))))
showimage(hstack((normalize(bqg), normalize(qg))))
bqg = normalize(subtract(qg, filters.gaussian_filter(subtract(qg, gradient), 80))).astype(np.uint8)
gradient = abs(unwrap.wrapped_gradient(qg))
bqg = normalize(subtract(qg, filters.gaussian_filter(subtract(qg, gradient), 80))).astype(np.uint8)
showimage(hstack((normalize(qg), normalize(bqg))))
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
showimage(hstack((normalize(bqg), normalize(th))))
bqg = filters.median_filter(bqg, 30)
ret, th = cv2.threshold(bqg.astype(np.uint8), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
showimage(hstack((normalize(bqg), normalize(th))))
